// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManageV2RayUserBygRPCClient is the client API for ManageV2RayUserBygRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManageV2RayUserBygRPCClient interface {
	AddUser(ctx context.Context, in *GRPCRequest, opts ...grpc.CallOption) (*GRPCReply, error)
	DeleteUser(ctx context.Context, in *GRPCRequest, opts ...grpc.CallOption) (*GRPCReply, error)
}

type manageV2RayUserBygRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewManageV2RayUserBygRPCClient(cc grpc.ClientConnInterface) ManageV2RayUserBygRPCClient {
	return &manageV2RayUserBygRPCClient{cc}
}

func (c *manageV2RayUserBygRPCClient) AddUser(ctx context.Context, in *GRPCRequest, opts ...grpc.CallOption) (*GRPCReply, error) {
	out := new(GRPCReply)
	err := c.cc.Invoke(ctx, "/myproto.manageV2rayUserBygRPC/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageV2RayUserBygRPCClient) DeleteUser(ctx context.Context, in *GRPCRequest, opts ...grpc.CallOption) (*GRPCReply, error) {
	out := new(GRPCReply)
	err := c.cc.Invoke(ctx, "/myproto.manageV2rayUserBygRPC/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManageV2RayUserBygRPCServer is the server API for ManageV2RayUserBygRPC service.
// All implementations must embed UnimplementedManageV2RayUserBygRPCServer
// for forward compatibility
type ManageV2RayUserBygRPCServer interface {
	AddUser(context.Context, *GRPCRequest) (*GRPCReply, error)
	DeleteUser(context.Context, *GRPCRequest) (*GRPCReply, error)
	mustEmbedUnimplementedManageV2RayUserBygRPCServer()
}

// UnimplementedManageV2RayUserBygRPCServer must be embedded to have forward compatible implementations.
type UnimplementedManageV2RayUserBygRPCServer struct {
}

func (UnimplementedManageV2RayUserBygRPCServer) AddUser(context.Context, *GRPCRequest) (*GRPCReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedManageV2RayUserBygRPCServer) DeleteUser(context.Context, *GRPCRequest) (*GRPCReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedManageV2RayUserBygRPCServer) mustEmbedUnimplementedManageV2RayUserBygRPCServer() {}

// UnsafeManageV2RayUserBygRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManageV2RayUserBygRPCServer will
// result in compilation errors.
type UnsafeManageV2RayUserBygRPCServer interface {
	mustEmbedUnimplementedManageV2RayUserBygRPCServer()
}

func RegisterManageV2RayUserBygRPCServer(s grpc.ServiceRegistrar, srv ManageV2RayUserBygRPCServer) {
	s.RegisterService(&ManageV2RayUserBygRPC_ServiceDesc, srv)
}

func _ManageV2RayUserBygRPC_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GRPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageV2RayUserBygRPCServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/myproto.manageV2rayUserBygRPC/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageV2RayUserBygRPCServer).AddUser(ctx, req.(*GRPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageV2RayUserBygRPC_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GRPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageV2RayUserBygRPCServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/myproto.manageV2rayUserBygRPC/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageV2RayUserBygRPCServer).DeleteUser(ctx, req.(*GRPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ManageV2RayUserBygRPC_ServiceDesc is the grpc.ServiceDesc for ManageV2RayUserBygRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManageV2RayUserBygRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "myproto.manageV2rayUserBygRPC",
	HandlerType: (*ManageV2RayUserBygRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUser",
			Handler:    _ManageV2RayUserBygRPC_AddUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _ManageV2RayUserBygRPC_DeleteUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/myproto.proto",
}
